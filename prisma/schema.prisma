generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VentureStatusType {
  PENDING
  BUILDING
  PAYOUT
  COMPLETED
}

enum RoleType {
  FRONTEND
  BACKEND
  FULLSTACK
  DESIGN
  MARKETING
}

model Venture {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    title String
    description String 
    role RoleType
    workDescription String 

    percent Int
    totalPayout Int
    currentPayout Float @default(0)
    skills String[]
    
    status VentureStatusType

    payoutUpdates PayoutUpdate[]
    buildingUpdates BuildingUpdate[]
    applications Application[]

    investorId String?
    @@index([investorId])
    investor Investor? @relation(fields: [investorId], references: [id], onDelete: SetNull)
    
    founderId  String
    @@index([founderId])
    founder Founder @relation(fields: [founderId], references: [id], onDelete: Cascade)
}


enum ActiveType {
  NONE
  INVESTOR
  FOUNDER
}

model User {
  id        String @id
  createdAt DateTime @default(now())
  firstName String
  lastName  String
  email     String @unique
  country   String
  imageUrl  String
  active    ActiveType @default(NONE)
  investor  Investor?
  founder   Founder?
}

model Investor {
    id        String @id
    createdAt DateTime @default(now())
    bio       String 
    skills    String[]
    educationAndExperience String

    github String?
    linkedin String?
    website String?

    userId String @unique
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    ventures Venture[]
    application Application[]
    reviews Review[]
    notifications Notification[]

    conversations Conversation[]
    messages Message[]
}

model Founder {
    id String @id 
    createdAt DateTime @default(now())
    bio       String
    educationAndExperience String

    userId String @unique
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    ventures Venture[]
    reviews Review[]
    notifications Notification[]
    conversations Conversation[]
    messages Message[] 
}

enum ApplicationStatusType {
  PENDING
  ACCEPTED
  REJECTED
}

model Application {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  projectInterest String
  projectSkills String
  status ApplicationStatusType

  ventureId String
  @@index([ventureId])
  venture Venture @relation(fields: [ventureId], references: [id], onDelete: Cascade)
  
  investorId String
  @@index([investorId])
  investor Investor @relation(fields: [investorId], references: [id], onDelete: Cascade)
}

enum AccountType {
  INVESTOR
  FOUNDER
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  review String
  revieweeType AccountType
  stars       Int        
  investorId String
  @@index([investorId])
  investor Investor @relation(fields: [investorId], references: [id], onDelete: Cascade)

  founderId String
  @@index([founderId])
  founder Founder @relation(fields: [founderId], references: [id], onDelete: Cascade)
}


model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  subject String
  content String
  read Boolean
  deleted Boolean

  link String?
  

  founderId String?
  @@index([founderId])
  founder Founder? @relation(fields: [founderId], references: [id], onDelete: Cascade)

  investorId String?
  @@index([investorId])
  investor Investor? @relation(fields: [investorId], references: [id], onDelete: Cascade)
}

model PayoutUpdate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
 
  earnings Int
  progress String
  plans String

  ventureId String
  @@index([ventureId])
  venture Venture @relation(fields: [ventureId], references: [id], onDelete: Cascade)
}

model BuildingUpdate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
 
  progress String

  ventureId String
  @@index([ventureId])
  venture Venture @relation(fields: [ventureId], references: [id], onDelete: Cascade)
}

model Conversation {
  id String @id @default(cuid())
  createdAt       DateTime @default(now())
  lastMessageAt DateTime @default(now())

  investorSeen Boolean @default(false)
  founderSeen Boolean @default(false)
  
  messages Message[]

  investorId String
  @@index([investorId])
  investor Investor @relation(fields: [investorId], references: [id], onDelete: Cascade)
  
  founderId String
  @@index([founderId])
  founder Founder @relation(fields: [founderId], references: [id], onDelete: Cascade)
}

model Message {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  content String

  conversationId String
  @@index([conversationId])
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderType AccountType
  
  investorId String
  @@index([investorId])
  investor Investor @relation(fields: [investorId], references: [id], onDelete: Cascade)

  founderId String
  @@index([founderId])
  founder Founder @relation(fields: [founderId], references: [id], onDelete: Cascade)
}
